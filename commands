#!/usr/bin/env bash
source "$(dirname "$0")/config"
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

if [[ ! -d $PLUGIN_DATA_ROOT ]]; then
  echo "$PLUGIN_SERVICE: Please run: sudo dokku plugin:install"
fi


echo "/ $2- / ${AWSS3_DEFAULT_ACCESS_KEY} / ${AWSS3_DEFAULT_SECRET} / ${AWSS3_DEFAULT_BUCKET_NAME} / ${APP} /":

case "$1" in
  $PLUGIN_COMMAND_PREFIX:run)
  while getopts ":n:a:s:b:" opt; do
      case $opt in
        n)
          APP=$OPTARG;
          if [ -z "${APP}" ]; then
            echo "ERROR: Instance name is missing. Aborting.";
          fi
          ;;
        a)
          AWS_ACCESS=$OPTARG;
          if [ -z "$AWS_ACCESS" ]; then
            AWS_ACCESS="$AWSS3_DEFAULT_ACCESS_KEY"
          fi
          ;;
        s)
          AWS_SECRET=$OPTARG;
          if [ -z "$AWS_SECRET" ]; then
            AWS_SECRET="$AWSS3_DEFAULT_SECRET"
          fi
          ;;
        b)
          AWS_BUCKET=$OPTARG;
          if [ -z "$AWS_BUCKET" ]; then
            echo "WARNING: AWS S3 bucket name is missing. Using default $AWSS3_DEFAULT_BUCKET (not recommended).";
            AWS_BUCKET="$AWSS3_DEFAULT_BUCKET"
          fi
          ;;
        :)
          echo "Option -$OPTARG requires an argument." >&2
          exit 1
          ;;
      esac
    done
    echo "/ $1 / ${AWS_ACCESS} / ${AWS_SECRET} / ${AWS_BUCKET} / ${APP} /":
    if [ ! -z "${APP}" ]; then
      docker run -p 5000:80 mgomez/aws-s3 bash -c "/opt/fakes3/bin/fakes3-init -a ${AWS_ACCESS} -s <${AWS_SECRET}> -b ${AWS_BUCKET}"
    else
      echo "$1 : Missing argument <app name>";
    fi
  ;;

  $PLUGIN_COMMAND_PREFIX:stop)
    if [ ! -z "${APP}" ]; then
      docker stop "${APP}"
    else
      echo "$1 : Missing argument <app name>";
    fi
  ;;

  $PLUGIN_COMMAND_PREFIX:link)
    if [ ! -z "${APP}" ] && [ ! -z "${APP}" ]; then
      s3-link-cmd() {
          declare desc="link the $PLUGIN_SERVICE service to the app"
          local cmd="$PLUGIN_COMMAND_PREFIX:link" argv=("$@"); [[ ${argv[0]} == "$cmd" ]] && shift 1
          declare SERVICE="$1" APP="$2"
          APP=${APP:="$DOKKU_APP_NAME"}

          [[ -z "$SERVICE" ]] && dokku_log_fail "Please specify a name for the service"
          [[ -z "$APP" ]] && dokku_log_fail "Please specify an app to run the command on"
          verify_app_name "$APP"
          verify_service_name "$SERVICE"
          service_link "$SERVICE" "$APP"
      }
      s3-link-cmd "$@"
    else
      echo "$1 : Missing argument <app name>";
    fi
  ;;

  $PLUGIN_COMMAND_PREFIX:unlink)
    if [ ! -z "${APP}" ] && [ ! -z "${APP}" ]; then
      s3-unlink-cmd() {
          declare desc="unlink the $PLUGIN_SERVICE service from the app"
          local cmd="$PLUGIN_COMMAND_PREFIX:unlink" argv=("$@"); [[ ${argv[0]} == "$cmd" ]] && shift 1
          declare SERVICE="$1" APP="$2"
          APP=${APP:="$DOKKU_APP_NAME"}

          [[ -z "$SERVICE" ]] && dokku_log_fail "Please specify a name for the service"
          [[ -z "$APP" ]] && dokku_log_fail "Please specify an app to run the command on"
          verify_app_name "$APP"
          verify_service_name "$SERVICE"
          service_unlink "$SERVICE" "$APP"
      }

      s3-unlink-cmd "$@"
    else
      echo "$1 : Missing argument <app name>";
    fi
  ;;

  help | $PLUGIN_COMMAND_PREFIX:help)
    help_content_func() {
      # shellcheck disable=SC2034
      declare desc="return $PLUGIN_COMMAND_PREFIX plugin help content"
      echo "$PLUGIN_COMMAND_PREFIX:run <app>, Create S3 instance for defined <app>"
      echo "$PLUGIN_COMMAND_PREFIX:stop <app>, Stop S3 instance for <app>"
      echo "$PLUGIN_COMMAND_PREFIX:link <name> <app>, Link the $PLUGIN_SERVICE service to the app"
      echo "$PLUGIN_COMMAND_PREFIX:unlink <name> <app>, Unlink the $PLUGIN_SERVICE service from the app"
    }
    if [[ $1 = "$PLUGIN_COMMAND_PREFIX:help" ]] ; then
      echo -e "Usage: dokku $PLUGIN_COMMAND_PREFIX[:COMMAND]"
      help_content_func | sort | column -c2 -t -s,
    else
      help_content_func
    fi
  ;;
esac
