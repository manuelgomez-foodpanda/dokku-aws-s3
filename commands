#!/usr/bin/env bash
source "$(dirname "$0")/config"
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

if [[ ! -d $PLUGIN_DATA_ROOT ]]; then
  echo "$PLUGIN_SERVICE: Please run: sudo dokku plugin:install"
fi

APP=$2; #generic case, overriden in RUN command.

case "$1" in
  $PLUGIN_COMMAND_PREFIX:run)
    COMMAND="$1"
    shift #skipping subcommand aws-s3:run
    for i in "$@"; do
        case $i in
            -n=*)
            APP="${i#*=}"
            shift # past argument=value
            ;;
            -p=*)
            PORT="${i#*=}"
            if [ -z "$PORT" ]; then
              PORT="$AWSS3_DEFAULT_PORT"
            fi
            shift # past argument=value
            ;;
            -a=*)
            AWS_ACCESS="${i#*=}"
            shift # past argument=value
            ;;
            -s=*)
            AWS_SECRET="${i#*=}"
            shift # past argument=value
            ;;
            -b=*)
            AWS_BUCKET="${i#*=}"
            shift # past argument=value
            ;;
            *)
                    # unknown option
            ;;
        esac
    done

    if [ ! -z "${APP}" ]; then
      if [ ! -z "$(docker ps | grep "${APP}" | awk '{ print $1 }')" ]; then
        echo "$COMMAND : Instance with name ${APP} is already running. Use a different one or remove the existing with docker rm.";
      else
        docker run --name="${APP}" -p "${PORT}":80 "${AWSS3_IMAGE}" bash -c "/opt/fakes3/bin/fakes3-init -a ${AWS_ACCESS} -s ${AWS_SECRET} -b ${AWS_BUCKET}"
      fi
    else
      echo "$COMMAND : Missing argument <INSTANCE_NAME>";
    fi
  ;;

  $PLUGIN_COMMAND_PREFIX:stop)
    if [ ! -z "${APP}" ]; then
      docker stop "${APP}"
      if [ "$2" = "--all" ]; then
        echo "Stoping and removing all fakeS3 instances..."
        for instance in $(docker ps | grep "${AWSS3_IMAGE}" | awk '{ print $1 }'); do
            docker stop "${instance}"
        done
      fi
    else
      echo "$1 : Missing argument <INSTANCE_NAME>";
    fi
  ;;

  $PLUGIN_COMMAND_PREFIX:check)
    if [ ! -z "${APP}" ]; then
      if [ "${APP}" = "--all" ]; then
        INSTANCE_TO_CHECK="${AWSS3_IMAGE}"
      else
        INSTANCE_TO_CHECK="$2"
      fi
      if [ ! -z "$(docker ps | grep "${INSTANCE_TO_CHECK}" | awk '{print $1}')" ]; then
        echo "A running "${INSTANCE_TO_CHECK}" instance was found";
      else
        echo "No running "${INSTANCE_TO_CHECK}" instance was found";
      fi
    else
      echo "$1 : Missing argument <INSTANCE_NAME>";
    fi
  ;;

  $PLUGIN_COMMAND_PREFIX:rm)
    if [ ! -z "${APP}" ]; then
      docker rm "${APP}"
      if [ "$2" = "--all" ]; then
        echo "Stoping and removing all fakeS3 instances..."
        for instance in $(docker ps | grep "${AWSS3_IMAGE}" | awk '{ print $1 }'); do
            docker rm -f "${instance}"
        done
      fi
    else
      echo "$1 : Missing argument <INSTANCE_NAME>";
    fi
  ;;

  $PLUGIN_COMMAND_PREFIX:link)
    if [ ! -z "${APP}" ] && [ ! -z "${APP}" ]; then
      s3-link-cmd() {
          declare desc="link the $PLUGIN_SERVICE service to the app"
          local cmd="$PLUGIN_COMMAND_PREFIX:link" argv=("$@"); [[ ${argv[0]} == "$cmd" ]] && shift 1
          declare SERVICE="$1" APP="$2"
          APP=${APP:="$DOKKU_APP_NAME"}

          [[ -z "$SERVICE" ]] && dokku_log_fail "Please specify a name for the service"
          [[ -z "$APP" ]] && dokku_log_fail "Please specify an app to run the command on"
          verify_app_name "$APP"
          verify_service_name "$SERVICE"
          service_link "$SERVICE" "$APP"
      }
      s3-link-cmd "$@"
    else
      echo "$1 : Missing argument <app name>";
    fi
  ;;

  $PLUGIN_COMMAND_PREFIX:unlink)
    if [ ! -z "${APP}" ] && [ ! -z "${APP}" ]; then
      s3-unlink-cmd() {
          declare desc="unlink the $PLUGIN_SERVICE service from the app"
          local cmd="$PLUGIN_COMMAND_PREFIX:unlink" argv=("$@"); [[ ${argv[0]} == "$cmd" ]] && shift 1
          declare SERVICE="$1" APP="$2"
          APP=${APP:="$DOKKU_APP_NAME"}

          [[ -z "$SERVICE" ]] && dokku_log_fail "Please specify a name for the service"
          [[ -z "$APP" ]] && dokku_log_fail "Please specify an app to run the command on"
          verify_app_name "$APP"
          verify_service_name "$SERVICE"
          service_unlink "$SERVICE" "$APP"
      }

      s3-unlink-cmd "$@"
    else
      echo "$1 : Missing argument <INSTANCE_NAME>";
    fi
  ;;

  help | $PLUGIN_COMMAND_PREFIX:help)
    help_content_func() {
      # shellcheck disable=SC2034
      declare desc="return $PLUGIN_COMMAND_PREFIX plugin help content"
      echo "$PLUGIN_COMMAND_PREFIX:run -n=<INSTANCE_NAME> -p=<PORT> -a=<ACCESSKEY> -s=<SECRET> -b=<BUCKET> : Create and run fake S3 instance for defined <INSTANCE_NAME>"
      echo "$PLUGIN_COMMAND_PREFIX:stop <INSTANCE_NAME> : Stop S3 instance for <INSTANCE_NAME> or all running instances with --all as instance name"
      echo "$PLUGIN_COMMAND_PREFIX:check <INSTANCE_NAME> : Check if a FakeS3 instance is currently running"
      echo "$PLUGIN_COMMAND_PREFIX:rm <INSTANCE_NAME> : Remove S3 instance for <INSTANCE_NAME>  or all running instances with --all as instance name"
      echo "$PLUGIN_COMMAND_PREFIX:link <name> <INSTANCE_NAME> : Link the $PLUGIN_SERVICE service to the app"
      echo "$PLUGIN_COMMAND_PREFIX:unlink <name> <INSTANCE_NAME> : Unlink the $PLUGIN_SERVICE service from the app"
    }
    if [[ $1 = "$PLUGIN_COMMAND_PREFIX:help" ]] ; then
      echo -e "Usage: dokku $PLUGIN_COMMAND_PREFIX[:COMMAND]"
      help_content_func | sort | column -c2 -t -s,
    else
      help_content_func
    fi
  ;;
esac
